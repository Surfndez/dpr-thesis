-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\Space_Vector_Modulation.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Space_Vector_Modulation
-- Source Path: FOC_Modified_v3/Space_Vector_Modulation
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Modified_v3_pkg.ALL;

ENTITY Space_Vector_Modulation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Phase_Voltage_A                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
        Phase_Voltage_B                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
        Phase_Voltage_C                   :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
        SVM_Phase_Voltage_A               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        SVM_Phase_Voltage_B               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        SVM_Phase_Voltage_C               :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
        );
END Space_Vector_Modulation;


ARCHITECTURE rtl OF Space_Vector_Modulation IS

  -- Signals
  SIGNAL Phase_Voltage_A_signed           : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL delayMatch_reg                   : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Phase_Voltage_A_1                : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Phase_Voltage_B_signed           : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Max_stage1_1_val                 : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Phase_Voltage_C_signed           : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Max_stage2_val                   : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Min_stage1_1_val                 : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Mux_out1                         : vector_of_signed32(0 TO 2);  -- sfix32_En25 [3]
  SIGNAL Min_stage2_val                   : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Add_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Add_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Add_add_temp                     : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Gain_cast                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Gain_out1                        : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Add1_v                           : signed(32 DOWNTO 0);  -- sfix33_En25
  SIGNAL Add1_sub_cast                    : vector_of_signed33(0 TO 2);  -- sfix33_En25 [3]
  SIGNAL Add1_sub_temp                    : vector_of_signed33(0 TO 2);  -- sfix33_En25 [3]
  SIGNAL Add1_out1                        : vector_of_signed16(0 TO 2);  -- sfix16_En8 [3]

BEGIN
  -- Space Vector Modulation

  Phase_Voltage_A_signed <= signed(Phase_Voltage_A);

  -- <S7>/Max
  -- 
  -- <S7>/Mux
  -- 
  -- <S7>/Min
  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        delayMatch_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= Phase_Voltage_A_signed;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Phase_Voltage_A_1 <= delayMatch_reg(1);

  Phase_Voltage_B_signed <= signed(Phase_Voltage_B);

  ---- Tree max implementation ----
  
  Max_stage1_1_val <= Phase_Voltage_A_1 WHEN Phase_Voltage_A_1 >= Phase_Voltage_B_signed ELSE
      Phase_Voltage_B_signed;

  Phase_Voltage_C_signed <= signed(Phase_Voltage_C);

  
  Max_stage2_val <= Max_stage1_1_val WHEN Max_stage1_1_val >= Phase_Voltage_C_signed ELSE
      Phase_Voltage_C_signed;

  ---- Tree min implementation ----
  
  Min_stage1_1_val <= Phase_Voltage_A_1 WHEN Phase_Voltage_A_1 <= Phase_Voltage_B_signed ELSE
      Phase_Voltage_B_signed;

  Mux_out1(0) <= Phase_Voltage_A_1;
  Mux_out1(1) <= signed(Phase_Voltage_B);
  Mux_out1(2) <= signed(Phase_Voltage_C);

  
  Min_stage2_val <= Min_stage1_1_val WHEN Min_stage1_1_val <= Phase_Voltage_C_signed ELSE
      Phase_Voltage_C_signed;

  -- <S7>/Add
  Add_add_cast <= resize(Max_stage2_val, 33);
  Add_add_cast_1 <= resize(Min_stage2_val, 33);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_out1 <= Add_add_temp(32 DOWNTO 17);

  -- <S7>/Gain
  Gain_cast <= resize(Add_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Gain_out1 <= Gain_cast(29 DOWNTO 0) & '0' & '0';

  -- <S7>/Add1
  Add1_v <= resize(Gain_out1, 33);

  Add1_out1_gen: FOR t_0 IN 0 TO 2 GENERATE
    Add1_sub_cast(t_0) <= resize(Mux_out1(t_0), 33);
    Add1_sub_temp(t_0) <= Add1_sub_cast(t_0) - Add1_v;
    Add1_out1(t_0) <= Add1_sub_temp(t_0)(32 DOWNTO 17);
  END GENERATE Add1_out1_gen;


  -- <S7>/Demux
  SVM_Phase_Voltage_A <= std_logic_vector(Add1_out1(0));

  SVM_Phase_Voltage_B <= std_logic_vector(Add1_out1(1));

  SVM_Phase_Voltage_C <= std_logic_vector(Add1_out1(2));

END rtl;

