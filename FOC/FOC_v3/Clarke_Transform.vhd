-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\Clarke_Transform.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Clarke_Transform
-- Source Path: FOC_Modified_v3/Clarke_Transform
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Clarke_Transform IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Phase_Current_A                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Phase_Current_B                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Alpha                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Beta                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
        );
END Clarke_Transform;


ARCHITECTURE rtl OF Clarke_Transform IS

  -- Signals
  SIGNAL Phase_Current_A_signed           : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Phase_Current_A_1                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Alpha_Gain_mul_temp              : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Alpha_Gain_out1                  : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Alpha_Gain_out1_1                : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Phase_Current_B_signed           : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Phase_Current_B_1                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Beta_Gain_mul_temp               : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Beta_Gain_out1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Beta_Gain_out1_1                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_add_cast                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Add_add_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Add_add_temp                     : signed(33 DOWNTO 0);  -- sfix34_En29
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En11

BEGIN
  -- Clarke Transform
  -- 
  -- Converts balanced three-phase quantities into balanced two-phase quantities.
  -- The A and B phases are converted to the direct axis (alpha) component and the quadrature axis (beta) component.
  -- The alpha and beta components are still dependent on time and speed.

  Phase_Current_A_signed <= signed(Phase_Current_A);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Phase_Current_A_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Phase_Current_A_1 <= Phase_Current_A_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  -- <S1>/Alpha_Gain
  Alpha_Gain_mul_temp <= to_signed(16#49E7#, 16) * Phase_Current_A_1;
  Alpha_Gain_out1 <= Alpha_Gain_mul_temp(29 DOWNTO 0) & '0' & '0';

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Alpha_Gain_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Alpha_Gain_out1_1 <= Alpha_Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Phase_Current_B_signed <= signed(Phase_Current_B);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Phase_Current_B_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Phase_Current_B_1 <= Phase_Current_B_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  -- <S1>/Beta_Gain
  Beta_Gain_mul_temp <= to_signed(16#49E7#, 16) * Phase_Current_B_1;
  Beta_Gain_out1 <= Beta_Gain_mul_temp(29 DOWNTO 0) & '0' & '0';

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Beta_Gain_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Beta_Gain_out1_1 <= Beta_Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  -- <S1>/Add
  Add_add_cast <= resize(Alpha_Gain_out1_1, 34);
  Add_add_cast_1 <= resize(Beta_Gain_out1_1 & '0', 34);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_out1 <= Add_add_temp(33 DOWNTO 18);

  Beta <= std_logic_vector(Add_out1);

  Alpha <= Phase_Current_A;

END rtl;

