-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\Park_Transform.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Park_Transform
-- Source Path: FOC_Modified_v3/Park_Transform
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Modified_v3_pkg.ALL;

ENTITY Park_Transform IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Alpha                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Beta                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        Sin_Coefficient                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Cos_Coefficient                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        D                                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En27
        Q                                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En27
        );
END Park_Transform;


ARCHITECTURE rtl OF Park_Transform IS

  -- Signals
  SIGNAL Alpha_signed                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Alpha_1                          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Cos_Coefficient_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Cos_Coefficient_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Beta_signed                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Beta_1                           : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sin_Coefficient_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sin_Coefficient_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product1_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Product1_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product2_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product2_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Add1_add_cast                    : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Add1_add_cast_1                  : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Add1_add_temp                    : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Produc3t_out1                    : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Product4_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product4_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Produc3t_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Produc3t_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_sub_cast                    : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Add2_sub_cast_1                  : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Add2_sub_temp                    : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Add2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En27

BEGIN
  -- Park Transform
  -- 
  -- Converts balanced two-phase orthogonal stationary system to an orthogonal rotating reference frame.

  Alpha_signed <= signed(Alpha);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Alpha_signed;
        reduced_reg(1 TO 2) <= reduced_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Alpha_1 <= reduced_reg(2);

  Cos_Coefficient_signed <= signed(Cos_Coefficient);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Cos_Coefficient_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Cos_Coefficient_1 <= Cos_Coefficient_signed;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  -- <S5>/Product1
  Product1_out1 <= Alpha_1 * Cos_Coefficient_1;

  Beta_signed <= signed(Beta);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Beta_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Beta_1 <= Beta_signed;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  Sin_Coefficient_signed <= signed(Sin_Coefficient);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Sin_Coefficient_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Sin_Coefficient_1 <= Sin_Coefficient_signed;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  -- <S5>/Product2
  Product2_out1 <= Beta_1 * Sin_Coefficient_1;

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product1_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Product1_out1_2 <= Product1_out1_1(29 DOWNTO 0) & '0' & '0';

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product2_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Product2_out1_2 <= Product2_out1_1(29 DOWNTO 0) & '0' & '0';

  -- <S5>/Add1
  Add1_add_cast <= resize(Product1_out1_2, 34);
  Add1_add_cast_1 <= resize(Product2_out1_2 & '0', 34);
  Add1_add_temp <= Add1_add_cast + Add1_add_cast_1;
  Add1_out1 <= Add1_add_temp(32 DOWNTO 1);

  D <= std_logic_vector(Add1_out1);

  -- <S5>/Product4
  Product4_out1 <= Beta_1 * Cos_Coefficient_1;

  -- <S5>/Produc3t
  Produc3t_out1 <= Alpha_1 * Sin_Coefficient_1;

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product4_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product4_out1_1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Product4_out1_2 <= Product4_out1_1(29 DOWNTO 0) & '0' & '0';

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Produc3t_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Produc3t_out1_1 <= Produc3t_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Produc3t_out1_2 <= Produc3t_out1_1(29 DOWNTO 0) & '0' & '0';

  -- <S5>/Add2
  Add2_sub_cast <= resize(Product4_out1_2 & '0', 34);
  Add2_sub_cast_1 <= resize(Produc3t_out1_2, 34);
  Add2_sub_temp <= Add2_sub_cast - Add2_sub_cast_1;
  Add2_out1 <= Add2_sub_temp(32 DOWNTO 1);

  Q <= std_logic_vector(Add2_out1);

END rtl;

