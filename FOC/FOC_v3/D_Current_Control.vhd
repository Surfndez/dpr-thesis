-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\D_Current_Control.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: D_Current_Control
-- Source Path: FOC_Modified_v3/DQ_Current_Control/D_Current_Control
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Modified_v3_pkg.ALL;

ENTITY D_Current_Control IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Current_Command                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Current_Measured                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En27
        paramCurrentControlI              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En3
        sampleTime                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En24
        paramCurrentControlP              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        Voltage                           :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
        );
END D_Current_Control;


ARCHITECTURE rtl OF D_Current_Control IS

  -- Component Declarations
  COMPONENT Saturate_Output
    PORT( In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En20
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En20
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Saturate_Output
    USE ENTITY work.Saturate_Output(rtl);

  -- Signals
  SIGNAL paramCurrentControlP_signed      : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL HwModeRegister4_reg              : vector_of_signed16(0 TO 4);  -- sfix16 [5]
  SIGNAL paramCurrentControlP_1           : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Current_Command_signed           : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL delayMatch_reg                   : vector_of_signed16(0 TO 3);  -- sfix16 [4]
  SIGNAL Current_Command_1                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Current_Measured_signed          : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Error_sub_cast                   : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Error_sub_cast_1                 : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Error_sub_temp                   : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL currentControlError              : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL currentControlError_1            : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Product2_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL paramCurrentControlI_signed      : signed(15 DOWNTO 0);  -- sfix16_En3
  SIGNAL paramCurrentControlI_1           : signed(15 DOWNTO 0);  -- sfix16_En3
  SIGNAL sampleTime_signed                : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL sampleTime_1                     : signed(15 DOWNTO 0);  -- sfix16_En24
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- sfix16_En19
  SIGNAL HwModeRegister3_reg              : vector_of_signed16(0 TO 3);  -- sfix16 [4]
  SIGNAL Product_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En19
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL Product1_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL Zero_out1                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL Zero_out1_dtc                    : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL preSatVoltage                    : signed(31 DOWNTO 0);  -- sfix32_En20
  SIGNAL Voltage_signed                   : signed(31 DOWNTO 0);  -- sfix32_En20
  SIGNAL Not_Equal_relop1                 : std_logic;
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- sfix32_En31
  SIGNAL currentControlITerm              : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Add_add_cast                     : signed(36 DOWNTO 0);  -- sfix37_En31
  SIGNAL Add_add_cast_1                   : signed(36 DOWNTO 0);  -- sfix37_En31
  SIGNAL Add_add_temp                     : signed(36 DOWNTO 0);  -- sfix37_En31
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Saturate_out1                    : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Add1_add_cast                    : signed(40 DOWNTO 0);  -- sfix41_En27
  SIGNAL Add1_add_cast_1                  : signed(40 DOWNTO 0);  -- sfix41_En27
  SIGNAL Add1_add_temp                    : signed(40 DOWNTO 0);  -- sfix41_En27
  SIGNAL Voltage_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Convert_out1           : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL currentControlError_2            : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Voltage_2                        : signed(31 DOWNTO 0);  -- sfix32_En20

BEGIN
  -- D Current Control

  -- <S8>/Saturate_Output
  u_Saturate_Output : Saturate_Output
    PORT MAP( In_rsvd => std_logic_vector(preSatVoltage),  -- sfix32_En20
              Out_rsvd => Voltage_1  -- sfix32_En20
              );

  paramCurrentControlP_signed <= signed(paramCurrentControlP);

  HwModeRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        HwModeRegister4_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        HwModeRegister4_reg(0) <= paramCurrentControlP_signed;
        HwModeRegister4_reg(1 TO 4) <= HwModeRegister4_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;

  paramCurrentControlP_1 <= HwModeRegister4_reg(4);

  Current_Command_signed <= signed(Current_Command);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        delayMatch_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= Current_Command_signed;
        delayMatch_reg(1 TO 3) <= delayMatch_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Current_Command_1 <= delayMatch_reg(3);

  Current_Measured_signed <= signed(Current_Measured);

  -- <S8>/Error
  Error_sub_cast <= resize(Current_Command_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 33);
  Error_sub_cast_1 <= resize(Current_Measured_signed, 33);
  Error_sub_temp <= Error_sub_cast - Error_sub_cast_1;
  currentControlError <= Error_sub_temp(31 DOWNTO 16);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        currentControlError_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        currentControlError_1 <= currentControlError;
      END IF;
    END IF;
  END PROCESS reduced_process;


  -- <S8>/Product2
  Product2_out1 <= paramCurrentControlP_1 * currentControlError_1;

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product2_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  paramCurrentControlI_signed <= signed(paramCurrentControlI);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        paramCurrentControlI_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        paramCurrentControlI_1 <= paramCurrentControlI_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  sampleTime_signed <= signed(sampleTime);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        sampleTime_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        sampleTime_1 <= sampleTime_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  -- <S8>/Product
  Product_mul_temp <= paramCurrentControlI_1 * sampleTime_1;
  Product_out1 <= Product_mul_temp(23 DOWNTO 8);

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        HwModeRegister3_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        HwModeRegister3_reg(0) <= Product_out1;
        HwModeRegister3_reg(1 TO 3) <= HwModeRegister3_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;

  Product_out1_1 <= HwModeRegister3_reg(3);

  -- <S8>/Product1
  Product1_mul_temp <= currentControlError_1 * Product_out1_1;
  Product1_out1 <= Product1_mul_temp(30 DOWNTO 0) & '0';

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product1_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  -- <S8>/Zero
  Zero_out1 <= to_signed(16#0000#, 16);

  Zero_out1_dtc <= signed'(Zero_out1(0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');

  -- <S8>/Not_Equal
  
  Not_Equal_relop1 <= '1' WHEN preSatVoltage /= Voltage_signed ELSE
      '0';

  -- <S8>/Switch
  
  Switch_out1 <= Product1_out1_1 WHEN Not_Equal_relop1 = '0' ELSE
      Zero_out1_dtc;

  -- <S8>/Add
  Add_add_cast <= resize(Switch_out1, 37);
  Add_add_cast_1 <= resize(currentControlITerm & '0' & '0' & '0' & '0', 37);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_out1 <= Add_add_temp(35 DOWNTO 4);

  -- <S8>/Saturate
  
  Saturate_out1 <= to_signed(1859775393, 32) WHEN Add_out1 > to_signed(1859775393, 32) ELSE
      to_signed(-1859775393, 32) WHEN Add_out1 < to_signed(-1859775393, 32) ELSE
      Add_out1;

  -- <S8>/Unit_Delay
  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        currentControlITerm <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        currentControlITerm <= Saturate_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  -- <S8>/Add1
  Add1_add_cast <= resize(Product2_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 41);
  Add1_add_cast_1 <= resize(currentControlITerm, 41);
  Add1_add_temp <= Add1_add_cast + Add1_add_cast_1;
  preSatVoltage <= Add1_add_temp(38 DOWNTO 7);

  Voltage_signed <= signed(Voltage_1);

  -- <S8>/Data_Type_Convert
  Data_Type_Convert_out1 <= Voltage_signed(24 DOWNTO 9);

  Voltage <= std_logic_vector(Data_Type_Convert_out1);

END rtl;

