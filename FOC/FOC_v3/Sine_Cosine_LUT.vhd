-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\Sine_Cosine_LUT.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sine_Cosine_LUT
-- Source Path: FOC_Modified_v3/Sine_Cosine/Sine_Cosine_LUT
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Modified_v3_pkg.ALL;

ENTITY Sine_Cosine_LUT IS
  PORT( u                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        sin_2_pi_u                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        cos_2_pi_u                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END Sine_Cosine_LUT;


ARCHITECTURE rtl OF Sine_Cosine_LUT IS

  -- Constants
  CONSTANT nc                             : vector_of_signed16(0 TO 32) := 
    (to_signed(16#0000#, 16), to_signed(16#0324#, 16), to_signed(16#0646#, 16), to_signed(16#0964#, 16),
     to_signed(16#0C7C#, 16), to_signed(16#0F8D#, 16), to_signed(16#1294#, 16), to_signed(16#1590#, 16),
     to_signed(16#187E#, 16), to_signed(16#1B5D#, 16), to_signed(16#1E2B#, 16), to_signed(16#20E7#, 16),
     to_signed(16#238E#, 16), to_signed(16#2620#, 16), to_signed(16#289A#, 16), to_signed(16#2AFB#, 16),
     to_signed(16#2D41#, 16), to_signed(16#2F6C#, 16), to_signed(16#3179#, 16), to_signed(16#3368#, 16),
     to_signed(16#3537#, 16), to_signed(16#36E5#, 16), to_signed(16#3871#, 16), to_signed(16#39DB#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3C42#, 16), to_signed(16#3D3F#, 16), to_signed(16#3E15#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3F4F#, 16), to_signed(16#3FB1#, 16), to_signed(16#3FEC#, 16),
     to_signed(16#4000#, 16));  -- sfix16 [33]
  CONSTANT nc_2                           : vector_of_signed16(0 TO 32) := 
    (to_signed(16#0000#, 16), to_signed(16#0324#, 16), to_signed(16#0646#, 16), to_signed(16#0964#, 16),
     to_signed(16#0C7C#, 16), to_signed(16#0F8D#, 16), to_signed(16#1294#, 16), to_signed(16#1590#, 16),
     to_signed(16#187E#, 16), to_signed(16#1B5D#, 16), to_signed(16#1E2B#, 16), to_signed(16#20E7#, 16),
     to_signed(16#238E#, 16), to_signed(16#2620#, 16), to_signed(16#289A#, 16), to_signed(16#2AFB#, 16),
     to_signed(16#2D41#, 16), to_signed(16#2F6C#, 16), to_signed(16#3179#, 16), to_signed(16#3368#, 16),
     to_signed(16#3537#, 16), to_signed(16#36E5#, 16), to_signed(16#3871#, 16), to_signed(16#39DB#, 16),
     to_signed(16#3B21#, 16), to_signed(16#3C42#, 16), to_signed(16#3D3F#, 16), to_signed(16#3E15#, 16),
     to_signed(16#3EC5#, 16), to_signed(16#3F4F#, 16), to_signed(16#3FB1#, 16), to_signed(16#3FEC#, 16),
     to_signed(16#4000#, 16));  -- sfix16 [33]

  -- Signals
  SIGNAL u_signed                         : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL CastU16En16_out1                 : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Point50_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp501_relop1                   : std_logic;
  SIGNAL Amp50_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp50_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp50_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL CastU16En16_out1_dtc             : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1_out1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Point25_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp251_1_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL LTEp251_relop1                   : std_logic;
  SIGNAL p50mA_sub_cast                   : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL p50mA_sub_cast_1                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL p50mA_out1                       : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL QuadHandle1_out1_dtc             : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL QuadHandle2_out1                 : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Look_Up_Table_out1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Negate1_cast                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate1_cast_1                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL SignCorrected_out1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CastU16En16_out1_1               : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Point25_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp25_relop1                    : std_logic;
  SIGNAL Point75_out1                     : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL GTEp75_relop1                    : std_logic;
  SIGNAL opDTCbool                        : std_logic;
  SIGNAL alpha1st_or_4th_Quad_out1        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Point50_out1_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL LTEp50_relop1                    : std_logic;
  SIGNAL p75mA_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p75mA_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p75mA_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp75_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1b_out1                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Amp25_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_sub_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_sub_cast_1                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL p25mA_out1                       : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle1a_out1                : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL QuadHandle2_out1_1               : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Look_Up_Table_out1_1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Negate_cast                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_cast_1                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Negate_out1_1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL SignCorrected_out1_1             : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_signed <= signed(u);

  -- <S18>/CastU16En16
  CastU16En16_out1 <= unsigned(u_signed(29 DOWNTO 14));

  -- <S18>/Point50
  Point50_out1 <= to_unsigned(16#8000#, 16);

  -- <S18>/LTEp50
  
  LTEp501_relop1 <= '1' WHEN CastU16En16_out1 <= Point50_out1 ELSE
      '0';

  -- <S18>/Amp50
  -- 
  -- <S16>/Handle Quarter Symmetry Sine
  -- 
  -- <S14>/Sine
  Amp50_sub_cast <= signed(resize(CastU16En16_out1, 17));
  Amp50_sub_cast_1 <= signed(resize(Point50_out1, 17));
  Amp50_out1 <= Amp50_sub_cast - Amp50_sub_cast_1;

  CastU16En16_out1_dtc <= signed(resize(CastU16En16_out1, 17));

  -- <S18>/QuadHandle1
  
  QuadHandle1_out1 <= Amp50_out1 WHEN LTEp501_relop1 = '0' ELSE
      CastU16En16_out1_dtc;

  -- <S18>/Point25
  Point25_out1 <= to_unsigned(16#4000#, 16);

  -- <S18>/LTEp25
  LTEp251_1_cast <= signed(resize(Point25_out1, 17));
  
  LTEp251_relop1 <= '1' WHEN QuadHandle1_out1 <= LTEp251_1_cast ELSE
      '0';

  -- <S18>/p50mA
  p50mA_sub_cast <= signed(resize(Point50_out1, 18));
  p50mA_sub_cast_1 <= resize(QuadHandle1_out1, 18);
  p50mA_out1 <= p50mA_sub_cast - p50mA_sub_cast_1;

  QuadHandle1_out1_dtc <= resize(QuadHandle1_out1, 18);

  -- <S18>/QuadHandle2
  
  QuadHandle2_out1 <= p50mA_out1 WHEN LTEp251_relop1 = '0' ELSE
      QuadHandle1_out1_dtc;

  -- <S16>/Look-Up Table
  Look_Up_Table1_output : PROCESS (QuadHandle2_out1)
    VARIABLE dout_low : signed(15 DOWNTO 0);
    VARIABLE k : unsigned(5 DOWNTO 0);
    VARIABLE f : unsigned(31 DOWNTO 0);
    VARIABLE div_temp : signed(17 DOWNTO 0);
    VARIABLE div_temp_0 : signed(49 DOWNTO 0);
    VARIABLE cast : signed(17 DOWNTO 0);
    VARIABLE mul_temp : signed(35 DOWNTO 0);
    VARIABLE sub_cast : signed(17 DOWNTO 0);
    VARIABLE sub_temp : signed(17 DOWNTO 0);
    VARIABLE cast_0 : signed(49 DOWNTO 0);
    VARIABLE add_cast : signed(48 DOWNTO 0);
    VARIABLE cast_1 : signed(32 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(15 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(48 DOWNTO 0);
    VARIABLE add_cast_0 : signed(47 DOWNTO 0);
    VARIABLE add_cast_1 : signed(48 DOWNTO 0);
    VARIABLE add_temp : signed(48 DOWNTO 0);
  BEGIN
    IF QuadHandle2_out1 <= to_signed(16#00000#, 18) THEN 
      k := to_unsigned(16#00#, 6);
    ELSIF QuadHandle2_out1 >= to_signed(16#04000#, 18) THEN 
      k := to_unsigned(16#20#, 6);
    ELSE 
      div_temp := QuadHandle2_out1 / to_signed(16#00200#, 18);
      k := unsigned(div_temp(5 DOWNTO 0));
    END IF;
    IF (QuadHandle2_out1 <= to_signed(16#00000#, 18)) OR (QuadHandle2_out1 >= to_signed(16#04000#, 18)) THEN 
      f := to_unsigned(0, 32);
    ELSE 
      cast := signed(k(1 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0');
      -- CSD Encoding (512) : 1000000000; Cost (Adders) = 0
      mul_temp := resize(cast & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 36);
      sub_cast := mul_temp(33 DOWNTO 16);
      sub_temp := QuadHandle2_out1 - sub_cast;
      cast_0 := sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      div_temp_0 := cast_0 / to_signed(16#00200#, 18);
      f := unsigned(div_temp_0(31 DOWNTO 0));
    END IF;
    dout_low := nc(to_integer(k));
    IF k = to_unsigned(16#20#, 6) THEN 
      NULL;
    ELSE 
      k := k + to_unsigned(16#01#, 6);
    END IF;
    add_cast := resize(dout_low & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
    cast_1 := signed(resize(f, 33));
    sub_temp_0 := nc(to_integer(k)) - dout_low;
    mul_temp_0 := cast_1 * sub_temp_0;
    add_cast_0 := mul_temp_0(47 DOWNTO 0);
    add_cast_1 := resize(add_cast_0, 49);
    add_temp := add_cast + add_cast_1;
    Look_Up_Table_out1 <= add_temp(47 DOWNTO 32);
  END PROCESS Look_Up_Table1_output;


  -- <S18>/Negate
  Negate1_cast <= resize(Look_Up_Table_out1, 17);
  Negate1_cast_1 <=  - (Negate1_cast);
  Negate_out1 <= Negate1_cast_1(15 DOWNTO 0);

  -- <S18>/SignCorrected
  
  SignCorrected_out1 <= Negate_out1 WHEN LTEp501_relop1 = '0' ELSE
      Look_Up_Table_out1;

  sin_2_pi_u <= std_logic_vector(SignCorrected_out1);

  -- <S17>/CastU16En16
  CastU16En16_out1_1 <= unsigned(u_signed(29 DOWNTO 14));

  -- <S17>/Point25
  Point25_out1_1 <= to_unsigned(16#4000#, 16);

  -- <S17>/LTEp25
  
  LTEp25_relop1 <= '1' WHEN CastU16En16_out1_1 <= Point25_out1_1 ELSE
      '0';

  -- <S17>/Point75
  Point75_out1 <= to_unsigned(16#C000#, 16);

  -- <S17>/GTEp75
  
  GTEp75_relop1 <= '1' WHEN CastU16En16_out1_1 >= Point75_out1 ELSE
      '0';

  -- <S17>/1st or 4th Quad
  -- 
  -- <S15>/Handle Quarter Symmetry Cosine
  -- 
  -- <S14>/Cosine
  opDTCbool <= LTEp25_relop1 OR GTEp75_relop1;

  alpha1st_or_4th_Quad_out1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & opDTCbool;

  -- <S17>/Point50
  Point50_out1_1 <= to_unsigned(16#8000#, 16);

  -- <S17>/LTEp50
  
  LTEp50_relop1 <= '1' WHEN CastU16En16_out1_1 <= Point50_out1_1 ELSE
      '0';

  -- <S17>/p75mA
  p75mA_sub_cast <= signed(resize(Point75_out1, 17));
  p75mA_sub_cast_1 <= signed(resize(CastU16En16_out1_1, 17));
  p75mA_out1 <= p75mA_sub_cast - p75mA_sub_cast_1;

  -- <S17>/Amp75
  Amp75_sub_cast <= signed(resize(CastU16En16_out1_1, 17));
  Amp75_sub_cast_1 <= signed(resize(Point75_out1, 17));
  Amp75_out1 <= Amp75_sub_cast - Amp75_sub_cast_1;

  -- <S17>/QuadHandle1b
  
  QuadHandle1b_out1 <= p75mA_out1 WHEN GTEp75_relop1 = '0' ELSE
      Amp75_out1;

  -- <S17>/Amp25
  Amp25_sub_cast <= signed(resize(CastU16En16_out1_1, 17));
  Amp25_sub_cast_1 <= signed(resize(Point25_out1_1, 17));
  Amp25_out1 <= Amp25_sub_cast - Amp25_sub_cast_1;

  -- <S17>/p25mA
  p25mA_sub_cast <= signed(resize(Point25_out1_1, 17));
  p25mA_sub_cast_1 <= signed(resize(CastU16En16_out1_1, 17));
  p25mA_out1 <= p25mA_sub_cast - p25mA_sub_cast_1;

  -- <S17>/QuadHandle1a
  
  QuadHandle1a_out1 <= Amp25_out1 WHEN LTEp25_relop1 = '0' ELSE
      p25mA_out1;

  -- <S17>/QuadHandle2
  
  QuadHandle2_out1_1 <= QuadHandle1b_out1 WHEN LTEp50_relop1 = '0' ELSE
      QuadHandle1a_out1;

  -- <S15>/Look-Up Table
  Look_Up_Table_output : PROCESS (QuadHandle2_out1_1)
    VARIABLE dout_low1 : signed(15 DOWNTO 0);
    VARIABLE k1 : unsigned(5 DOWNTO 0);
    VARIABLE f1 : unsigned(31 DOWNTO 0);
    VARIABLE div_temp1 : signed(16 DOWNTO 0);
    VARIABLE div_temp_01 : signed(48 DOWNTO 0);
    VARIABLE cast1 : signed(16 DOWNTO 0);
    VARIABLE mul_temp1 : signed(33 DOWNTO 0);
    VARIABLE sub_cast1 : signed(16 DOWNTO 0);
    VARIABLE sub_temp1 : signed(16 DOWNTO 0);
    VARIABLE cast_01 : signed(48 DOWNTO 0);
    VARIABLE add_cast1 : signed(48 DOWNTO 0);
    VARIABLE cast_11 : signed(32 DOWNTO 0);
    VARIABLE sub_temp_01 : signed(15 DOWNTO 0);
    VARIABLE mul_temp_01 : signed(48 DOWNTO 0);
    VARIABLE add_cast_01 : signed(47 DOWNTO 0);
    VARIABLE add_cast_11 : signed(48 DOWNTO 0);
    VARIABLE add_temp1 : signed(48 DOWNTO 0);
  BEGIN
    IF QuadHandle2_out1_1 <= to_signed(16#00000#, 17) THEN 
      k1 := to_unsigned(16#00#, 6);
    ELSIF QuadHandle2_out1_1 >= to_signed(16#04000#, 17) THEN 
      k1 := to_unsigned(16#20#, 6);
    ELSE 
      div_temp1 := QuadHandle2_out1_1 / to_signed(16#00200#, 17);
      k1 := unsigned(div_temp1(5 DOWNTO 0));
    END IF;
    IF (QuadHandle2_out1_1 <= to_signed(16#00000#, 17)) OR (QuadHandle2_out1_1 >= to_signed(16#04000#, 17)) THEN 
      f1 := to_unsigned(0, 32);
    ELSE 
      cast1 := k1(0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      -- CSD Encoding (512) : 1000000000; Cost (Adders) = 0
      mul_temp1 := resize(cast1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34);
      sub_cast1 := mul_temp1(32 DOWNTO 16);
      sub_temp1 := QuadHandle2_out1_1 - sub_cast1;
      cast_01 := sub_temp1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
      div_temp_01 := cast_01 / to_signed(16#00200#, 17);
      f1 := unsigned(div_temp_01(31 DOWNTO 0));
    END IF;
    dout_low1 := nc_2(to_integer(k1));
    IF k1 = to_unsigned(16#20#, 6) THEN 
      NULL;
    ELSE 
      k1 := k1 + to_unsigned(16#01#, 6);
    END IF;
    add_cast1 := resize(dout_low1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
    cast_11 := signed(resize(f1, 33));
    sub_temp_01 := nc_2(to_integer(k1)) - dout_low1;
    mul_temp_01 := cast_11 * sub_temp_01;
    add_cast_01 := mul_temp_01(47 DOWNTO 0);
    add_cast_11 := resize(add_cast_01, 49);
    add_temp1 := add_cast1 + add_cast_11;
    Look_Up_Table_out1_1 <= add_temp1(47 DOWNTO 32);
  END PROCESS Look_Up_Table_output;


  -- <S17>/Negate
  Negate_cast <= resize(Look_Up_Table_out1_1, 17);
  Negate_cast_1 <=  - (Negate_cast);
  Negate_out1_1 <= Negate_cast_1(15 DOWNTO 0);

  -- <S17>/SignCorrected
  
  SignCorrected_out1_1 <= Negate_out1_1 WHEN alpha1st_or_4th_Quad_out1 = to_unsigned(16#00#, 8) ELSE
      Look_Up_Table_out1_1;

  cos_2_pi_u <= std_logic_vector(SignCorrected_out1_1);

END rtl;

