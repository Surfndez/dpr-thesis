-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\Inv_Park_Transform.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Inv_Park_Transform
-- Source Path: FOC_Modified_v3/Inv_Park_Transform
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Modified_v3_pkg.ALL;

ENTITY Inv_Park_Transform IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        D                                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        Q                                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        Sin_Coefficient                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Cos_Coefficient                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Alpha                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        Beta                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
        );
END Inv_Park_Transform;


ARCHITECTURE rtl OF Inv_Park_Transform IS

  -- Signals
  SIGNAL D_signed                         : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL D_1                              : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Cos_Coefficient_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 4);  -- sfix16 [5]
  SIGNAL Cos_Coefficient_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Q_signed                         : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Q_1                              : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sin_Coefficient_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL reduced_reg_1                    : vector_of_signed16(0 TO 4);  -- sfix16 [5]
  SIGNAL Sin_Coefficient_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product1_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product1_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Product2_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product2_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Add1_sub_cast                    : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Add1_sub_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Add1_sub_temp                    : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Add1_out1                        : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product3_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product3_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Product4_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Product4_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Add2_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Add2_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Add2_add_temp                    : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL Add2_out1                        : signed(15 DOWNTO 0);  -- sfix16_En10

BEGIN
  -- Inverse Park Transform
  -- 
  -- Converts orthogonal rotating reference frame (dq) to two-phase orthogonal stationary reference frame (alpha, beta)

  D_signed <= signed(D);

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        D_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        D_1 <= D_signed;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Cos_Coefficient_signed <= signed(Cos_Coefficient);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Cos_Coefficient_signed;
        reduced_reg(1 TO 4) <= reduced_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Cos_Coefficient_1 <= reduced_reg(4);

  -- <S4>/Product1
  Product1_out1 <= D_1 * Cos_Coefficient_1;

  Q_signed <= signed(Q);

  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Q_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Q_1 <= Q_signed;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  Sin_Coefficient_signed <= signed(Sin_Coefficient);

  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        reduced_reg_1 <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= Sin_Coefficient_signed;
        reduced_reg_1(1 TO 4) <= reduced_reg_1(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  Sin_Coefficient_1 <= reduced_reg_1(4);

  -- <S4>/Product2
  Product2_out1 <= Q_1 * Sin_Coefficient_1;

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product1_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Product1_out1_2 <= Product1_out1_1(29 DOWNTO 0) & '0' & '0';

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product2_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Product2_out1_2 <= Product2_out1_1(29 DOWNTO 0) & '0' & '0';

  -- <S4>/Add1
  Add1_sub_cast <= resize(Product1_out1_2, 33);
  Add1_sub_cast_1 <= resize(Product2_out1_2, 33);
  Add1_sub_temp <= Add1_sub_cast - Add1_sub_cast_1;
  Add1_out1 <= Add1_sub_temp(32 DOWNTO 17);

  Alpha <= std_logic_vector(Add1_out1);

  -- <S4>/Product3
  Product3_out1 <= D_1 * Sin_Coefficient_1;

  -- <S4>/Product4
  Product4_out1 <= Q_1 * Cos_Coefficient_1;

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product3_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product3_out1_1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Product3_out1_2 <= Product3_out1_1(29 DOWNTO 0) & '0' & '0';

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Product4_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product4_out1_1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Product4_out1_2 <= Product4_out1_1(29 DOWNTO 0) & '0' & '0';

  -- <S4>/Add2
  Add2_add_cast <= resize(Product3_out1_2, 33);
  Add2_add_cast_1 <= resize(Product4_out1_2, 33);
  Add2_add_temp <= Add2_add_cast + Add2_add_cast_1;
  Add2_out1 <= Add2_add_temp(32 DOWNTO 17);

  Beta <= std_logic_vector(Add2_out1);

END rtl;

