-- -------------------------------------------------------------
-- 
-- File Name: foc_hdl_prj_v3\hdlsrc\FOC_Modified_v3\Inv_Clarke_Transform.vhd
-- Created: 2017-11-28 19:11:02
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Inv_Clarke_Transform
-- Source Path: FOC_Modified_v3/Inv_Clarke_Transform
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FOC_Modified_v3_pkg.ALL;

ENTITY Inv_Clarke_Transform IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Alpha                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        Beta                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        Phase_Voltage_A                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
        Phase_Voltage_B                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En25
        Phase_Voltage_C                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En25
        );
END Inv_Clarke_Transform;


ARCHITECTURE rtl OF Inv_Clarke_Transform IS

  -- Signals
  SIGNAL Alpha_signed                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Convert_out1           : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Beta_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Beta_1                           : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain1_mul_temp                   : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Gain1_out1                       : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Gain1_out1_1                     : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Gain_cast                        : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Gain_out1                        : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL reduced_reg                      : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Gain_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En27
  SIGNAL Add_sub_cast                     : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add_sub_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add_sub_temp                     : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En25
  SIGNAL Add1_cast                        : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add1_cast_1                      : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add1_sub_cast                    : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add1_sub_temp                    : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En25

BEGIN
  -- Inverse Clarke Transform
  -- 
  -- Converts direct axis (alpha) component and the quadrature axis (beta) component to balanced three-phase quantities
  -- The alpha and beta components are dependent on time and speed.

  Alpha_signed <= signed(Alpha);

  -- <S3>/Data_Type_Convert
  Data_Type_Convert_out1 <= resize(Alpha_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  Phase_Voltage_A <= std_logic_vector(Data_Type_Convert_out1);

  Beta_signed <= signed(Beta);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Beta_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Beta_1 <= Beta_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  -- <S3>/Gain1
  Gain1_mul_temp <= to_signed(16#6EDA#, 16) * Beta_1;
  Gain1_out1 <= Gain1_mul_temp(30 DOWNTO 0) & '0';

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        Gain1_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  -- <S3>/Gain
  Gain_cast <= resize(Alpha_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Gain_out1 <= Gain_cast(29 DOWNTO 0) & '0' & '0';

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '0' THEN
        reduced_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Gain_out1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Gain_out1_1 <= reduced_reg(1);

  -- <S3>/Add
  Add_sub_cast <= resize(Gain1_out1_1 & '0', 34);
  Add_sub_cast_1 <= resize(Gain_out1_1, 34);
  Add_sub_temp <= Add_sub_cast - Add_sub_cast_1;
  Add_out1 <= Add_sub_temp(33 DOWNTO 2);

  Phase_Voltage_B <= std_logic_vector(Add_out1);

  -- <S3>/Add1
  Add1_cast <= resize(Gain_out1_1, 34);
  Add1_cast_1 <=  - (Add1_cast);
  Add1_sub_cast <= resize(Gain1_out1_1 & '0', 34);
  Add1_sub_temp <= Add1_cast_1 - Add1_sub_cast;
  Add1_out1 <= Add1_sub_temp(33 DOWNTO 2);

  Phase_Voltage_C <= std_logic_vector(Add1_out1);

END rtl;

